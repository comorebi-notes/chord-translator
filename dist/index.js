"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("babel-polyfill");

var _tonal = require("tonal");

var translateType = function translateType(type) {
  var notes = [0, 0, 0, null, null, null, null];
  var baseType = type;
  var tension = void 0;
  var omit = void 0;

  var tensionRegex = /\((.*)\)/;
  var tensionMatch = type.match(tensionRegex);
  if (tensionMatch) {
    tension = tensionMatch[1].replace(/\s+/g, "").split(",");
    baseType = baseType.replace(tensionRegex, "");
  }

  var omitRegex = /omit(\d+)/;
  var omitMatch = type.match(omitRegex);
  if (omitMatch) {
    omit = omitMatch[1];
    baseType = baseType.replace(omitRegex, "");
  }

  var manipulateType = function manipulateType(regex) {
    if (baseType.match(regex)) {
      baseType = baseType.replace(regex, "");
      return true;
    } else {
      return false;
    }
  };

  // base
  switch (true) {
    case manipulateType(/^M(?!(7|9|11|13))/):
      break;
    case manipulateType(/^m(?!aj)/):
      notes[1] = -1;break;
    case manipulateType(/aug/):
      notes[2] = 1;break;
    case manipulateType(/Φ|φ/):
      notes[1] = -1;notes[2] = -1;notes[3] = 0;break;
  }
  // +-
  switch (true) {
    case manipulateType(/\+5|#5/):
      notes[2] = 1;break;
    case manipulateType(/-5|b5/):
      notes[2] = -1;break;
  }
  switch (true) {
    case manipulateType(/^6/):
      notes[3] = -1;break;
    case manipulateType(/^7/):
      notes[3] = 0;break;
    case manipulateType(/^9/):
      notes[3] = 0;notes[4] = 0;break;
    case manipulateType(/^11/):
      notes[3] = 0;notes[4] = 0;notes[5] = 0;break;
    case manipulateType(/^13/):
      notes[3] = 0;notes[4] = 0;notes[5] = 0;notes[6] = 0;break;
  }
  // sus
  switch (true) {
    case manipulateType(/sus4/):
      notes[1] = 1;break;
    case manipulateType(/sus2/):
      notes[1] = -2;break;
  }
  // add
  switch (true) {
    case manipulateType(/add2/):
      notes[4] = -12;break;
    case manipulateType(/add9/):
      notes[4] = 0;break;
    case manipulateType(/add4/):
      notes[5] = -12;break;
    case manipulateType(/add11/):
      notes[5] = 0;break;
    case manipulateType(/add6/):
      notes[6] = -12;break;
    case manipulateType(/add13/):
      notes[6] = 0;break;
  }
  // M
  switch (true) {
    case manipulateType(/(M|maj|△|Δ)7/):
      notes[3] = 1;break;
    case manipulateType(/(M|maj|△|Δ)9/):
      notes[3] = 1;notes[4] = 0;break;
    case manipulateType(/(M|maj|△|Δ)11/):
      notes[3] = 1;notes[4] = 0;notes[5] = 0;break;
    case manipulateType(/(M|maj|△|Δ)13/):
      notes[3] = 1;notes[4] = 0;notes[5] = 0;notes[6] = 0;break;
  }
  // dim
  switch (true) {
    case manipulateType(/^(dim|o)7/):
      notes[1] -= 1;notes[2] -= 1;notes[3] = -1;break;
    case manipulateType(/^(dim|o)/):
      notes[1] -= 1;notes[2] -= 1;break;
  }
  // tension
  if (tension) baseType += tension.join("");
  if (manipulateType(/(#|\+)9/)) notes[4] = 1;
  if (manipulateType(/(b|-)9/)) notes[4] = -1;
  if (manipulateType(/9/)) notes[4] = 0;
  if (manipulateType(/(#|\+)11/)) notes[5] = 1;
  if (manipulateType(/(b|-)11/)) notes[5] = -1;
  if (manipulateType(/11/)) notes[5] = 0;
  if (manipulateType(/(#|\+)13/)) notes[6] = 1;
  if (manipulateType(/(b|-)13/)) notes[6] = -1;
  if (manipulateType(/13/)) notes[6] = 0;
  // omit
  switch (omit) {
    case "1":
      notes[0] = null;break;
    case "3":
      notes[1] = null;break;
    case "5":
      notes[2] = null;break;
    case "7":
      notes[3] = null;break;
    case "9":
      notes[4] = null;break;
    case "11":
      notes[5] = null;break;
    case "13":
      notes[6] = null;break;
  }

  return notes;
};

var transposer = function transposer(note, interval) {
  return _tonal.Note.fromMidi(_tonal.Note.midi(note) + interval);
};

var buildChord = function buildChord(root, baseNotes, translator) {
  var notes = [];
  var chord13 = _tonal.Chord.notes(root, "13"); // 13コードを基準にして音を足したり減らしたりする
  chord13.splice(5, 0, _tonal.Distance.transpose(root, "M11")); // tonal の 13コードは 11th が omit されている

  for (var i = 0; i < 7; i += 1) {
    if (translator[i] !== null) notes.push(transposer(chord13[i], translator[i]));
  }
  return notes;
};

var chordTranslator = function chordTranslator(root, baseKey, type) {
  var baseNotes = _tonal.Chord.notes("" + root + baseKey, "M");
  var notes = buildChord("" + root + baseKey, baseNotes, translateType(type));
  return notes;
};

exports.default = chordTranslator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJ0cmFuc2xhdGVUeXBlIiwidHlwZSIsIm5vdGVzIiwiYmFzZVR5cGUiLCJ0ZW5zaW9uIiwib21pdCIsInRlbnNpb25SZWdleCIsInRlbnNpb25NYXRjaCIsIm1hdGNoIiwicmVwbGFjZSIsInNwbGl0Iiwib21pdFJlZ2V4Iiwib21pdE1hdGNoIiwibWFuaXB1bGF0ZVR5cGUiLCJyZWdleCIsImpvaW4iLCJ0cmFuc3Bvc2VyIiwibm90ZSIsImludGVydmFsIiwiZnJvbU1pZGkiLCJtaWRpIiwiYnVpbGRDaG9yZCIsInJvb3QiLCJiYXNlTm90ZXMiLCJ0cmFuc2xhdG9yIiwiY2hvcmQxMyIsInNwbGljZSIsInRyYW5zcG9zZSIsImkiLCJwdXNoIiwiY2hvcmRUcmFuc2xhdG9yIiwiYmFzZUtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7O0FBRUEsSUFBTUEsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDQyxJQUFELEVBQVU7QUFDOUIsTUFBTUMsUUFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLElBQVYsRUFBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsRUFBNEIsSUFBNUIsQ0FBZDtBQUNBLE1BQUlDLFdBQVdGLElBQWY7QUFDQSxNQUFJRyxnQkFBSjtBQUNBLE1BQUlDLGFBQUo7O0FBRUEsTUFBTUMsZUFBZSxVQUFyQjtBQUNBLE1BQU1DLGVBQWVOLEtBQUtPLEtBQUwsQ0FBV0YsWUFBWCxDQUFyQjtBQUNBLE1BQUlDLFlBQUosRUFBa0I7QUFDaEJILGNBQVVHLGFBQWEsQ0FBYixFQUFnQkUsT0FBaEIsQ0FBd0IsTUFBeEIsRUFBZ0MsRUFBaEMsRUFBb0NDLEtBQXBDLENBQTBDLEdBQTFDLENBQVY7QUFDQVAsZUFBV0EsU0FBU00sT0FBVCxDQUFpQkgsWUFBakIsRUFBK0IsRUFBL0IsQ0FBWDtBQUNEOztBQUVELE1BQU1LLFlBQVksV0FBbEI7QUFDQSxNQUFNQyxZQUFZWCxLQUFL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RUFBaUM7QUFDbEQsTUFBTXRCLFFBQVEsRUFBZDtBQUNBLE1BQU11QixVQUFVLGFBQU12QixLQUFOLENBQVlvQixJQUFaLEVBQWtCLElBQWxCLENBQWhCLENBRmtELENBRVY7QUFDeENHLFVBQVFDLE1BQVIsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLGdCQUFTQyxTQUFULENBQW1CTCxJQUFuQixFQUF5QixLQUF6QixDQUFyQixFQUhrRCxDQUdJOztBQUV0RCxPQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSSxDQUFwQixFQUF1QkEsS0FBSyxDQUE1QixFQUErQjtBQUM3QixRQUFJSixXQUFXSSxDQUFYLE1BQWtCLElBQXRCLEVBQTRCMUIsTUFBTTJCLElBQU4sQ0FBV2IsV0FBV1MsUUFBUUcsQ0FBUixDQUFYLEVBQXVCSixXQUFXSSxDQUFYLENBQXZCLENBQVg7QUFDN0I7QUFDRCxTQUFPMUIsS0FBUDtBQUNELENBVEQ7O0FBV0EsSUFBTTRCLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ1IsSUFBRCxFQUFPUyxPQUFQLEVBQWdCOUIsSUFBaEIsRUFBeUI7QUFDL0MsTUFBTXNCLFlBQVksYUFBTXJCLEtBQU4sTUFBZW9CLElBQWYsR0FBc0JTLE9BQXRCLEVBQWlDLEdBQWpDLENBQWxCO0FBQ0EsTUFBTTdCLFFBQVFtQixnQkFBY0MsSUFBZCxHQUFxQlMsT0FBckIsRUFBZ0NSLFNBQWhDLEVBQTJDdkIsY0FBY0MsSUFBZCxDQUEzQyxDQUFkO0FBQ0EsU0FBT0MsS0FBUDtBQUNELENBSkQ7O2tCQU1lNEIsZSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcImJhYmVsLXBvbHlmaWxsXCJcblxuaW1wb3J0IHsgQ2hvcmQsIE5vdGUsIERpc3RhbmNlIH0gZnJvbSBcInRvbmFsXCJcblxuY29uc3QgdHJhbnNsYXRlVHlwZSA9ICh0eXBlKSA9PiB7XG4gIGNvbnN0IG5vdGVzID0gWzAsIDAsIDAsIG51bGwsIG51bGwsIG51bGwsIG51bGxdXG4gIGxldCBiYXNlVHlwZSA9IHR5cGVcbiAgbGV0IHRlbnNpb25cbiAgbGV0IG9taXRcblxuICBjb25zdCB0ZW5zaW9uUmVnZXggPSAvXFwoKC4qKVxcKS9cbiAgY29uc3QgdGVuc2lvbk1hdGNoID0gdHlwZS5tYXRjaCh0ZW5zaW9uUmVnZXgpXG4gIGlmICh0ZW5zaW9uTWF0Y2gpIHtcbiAgICB0ZW5zaW9uID0gdGVuc2lvbk1hdGNoWzFdLnJlcGxhY2UoL1xccysvZywgXCJcIikuc3BsaXQoXCIsXCIpXG4gICAgYmFzZVR5cGUgPSBiYXNlVHlwZS5yZXBsYWNlKHRlbnNpb25SZWdleCwgXCJcIilcbiAgfVxuXG4gIGNvbnN0IG9taXRSZWdleCA9IC9vbWl0KFxcZCspL1xuICBjb25zdCBvbWl0TWF0Y2ggPSB0eXBlLm1hdGNoKG9taXRSZWdleClcbiAgaWYgKG9taXRNYXRjaCkge1xuICAgIG9taXQgPSBvbWl0TWF0Y2hbMV1cbiAgICBiYXNlVHlwZSA9IGJhc2VUeXBlLnJlcGxhY2Uob21pdFJlZ2V4LCBcIlwiKVxuICB9XG5cbiAgY29uc3QgbWFuaXB1bGF0ZVR5cGUgPSAocmVnZXgpID0+IHtcbiAgICBpZiAoYmFzZVR5cGUubWF0Y2gocmVnZXgpKSB7XG4gICAgICBiYXNlVHlwZSA9IGJhc2VUeXBlLnJlcGxhY2UocmVnZXgsIFwiXCIpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvLyBiYXNlXG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoL15NKD8hKDd8OXwxMXwxMykpLyk6IGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvXm0oPyFhaikvKTogbm90ZXNbMV0gPSAtMTsgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC9hdWcvKTogICAgICBub3Rlc1syXSA9IDE7ICBicmVha1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoL86mfM+GLyk6ICAgICAgbm90ZXNbMV0gPSAtMTsgbm90ZXNbMl0gPSAtMTsgbm90ZXNbM10gPSAwOyBicmVha1xuICB9XG4gIC8vICstXG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoL1xcKzV8IzUvKTogbm90ZXNbMl0gPSAxOyAgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC8tNXxiNS8pOiAgbm90ZXNbMl0gPSAtMTsgYnJlYWtcbiAgfVxuICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC9eNi8pOiAgbm90ZXNbM10gPSAtMTsgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC9eNy8pOiAgbm90ZXNbM10gPSAwOyAgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC9eOS8pOiAgbm90ZXNbM10gPSAwOyAgbm90ZXNbNF0gPSAwOyBicmVha1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoL14xMS8pOiBub3Rlc1szXSA9IDA7ICBub3Rlc1s0XSA9IDA7IG5vdGVzWzVdID0gMDsgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC9eMTMvKTogbm90ZXNbM10gPSAwOyAgbm90ZXNbNF0gPSAwOyBub3Rlc1s1XSA9IDA7IG5vdGVzWzZdID0gMDsgYnJlYWtcbiAgfVxuICAvLyBzdXNcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvc3VzNC8pOiBub3Rlc1sxXSA9IDE7ICBicmVha1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoL3N1czIvKTogbm90ZXNbMV0gPSAtMjsgYnJlYWtcbiAgfVxuICAvLyBhZGRcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkMi8pOiAgbm90ZXNbNF0gPSAtMTI7IGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkOS8pOiAgbm90ZXNbNF0gPSAwOyAgIGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkNC8pOiAgbm90ZXNbNV0gPSAtMTI7IGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkMTEvKTogbm90ZXNbNV0gPSAwOyAgIGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkNi8pOiAgbm90ZXNbNl0gPSAtMTI7IGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvYWRkMTMvKTogbm90ZXNbNl0gPSAwOyAgIGJyZWFrXG4gIH1cbiAgLy8gTVxuICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC8oTXxtYWp84pazfM6UKTcvKTogIG5vdGVzWzNdID0gMTsgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC8oTXxtYWp84pazfM6UKTkvKTogIG5vdGVzWzNdID0gMTsgbm90ZXNbNF0gPSAwOyBicmVha1xuICAgIGNhc2UgbWFuaXB1bGF0ZVR5cGUoLyhNfG1hanzilrN8zpQpMTEvKTogbm90ZXNbM10gPSAxOyBub3Rlc1s0XSA9IDA7IG5vdGVzWzVdID0gMDsgYnJlYWtcbiAgICBjYXNlIG1hbmlwdWxhdGVUeXBlKC8oTXxtYWp84pazfM6UKTEzLyk6IG5vdGVzWzNdID0gMTsgbm90ZXNbNF0gPSAwOyBub3Rlc1s1XSA9IDA7IG5vdGVzWzZdID0gMDsgYnJlYWtcbiAgfVxuICAvLyBkaW1cbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvXihkaW18byk3Lyk6IG5vdGVzWzFdIC09IDE7IG5vdGVzWzJdIC09IDE7IG5vdGVzWzNdID0gLTE7IGJyZWFrXG4gICAgY2FzZSBtYW5pcHVsYXRlVHlwZSgvXihkaW18bykvKTogIG5vdGVzWzFdIC09IDE7IG5vdGVzWzJdIC09IDE7IGJyZWFrXG4gIH1cbiAgLy8gdGVuc2lvblxuICBpZiAodGVuc2lvbikgYmFzZVR5cGUgKz0gdGVuc2lvbi5qb2luKFwiXCIpXG4gIGlmIChtYW5pcHVsYXRlVHlwZSgvKCN8XFwrKTkvKSkgIG5vdGVzWzRdID0gMVxuICBpZiAobWFuaXB1bGF0ZVR5cGUoLyhifC0pOS8pKSAgIG5vdGVzWzRdID0gLTFcbiAgaWYgKG1hbmlwdWxhdGVUeXBlKC85LykpICAgICAgICBub3Rlc1s0XSA9IDBcbiAgaWYgKG1hbmlwdWxhdGVUeXBlKC8oI3xcXCspMTEvKSkgbm90ZXNbNV0gPSAxXG4gIGlmIChtYW5pcHVsYXRlVHlwZSgvKGJ8LSkxMS8pKSAgbm90ZXNbNV0gPSAtMVxuICBpZiAobWFuaXB1bGF0ZVR5cGUoLzExLykpICAgICAgIG5vdGVzWzVdID0gMFxuICBpZiAobWFuaXB1bGF0ZVR5cGUoLygjfFxcKykxMy8pKSBub3Rlc1s2XSA9IDFcbiAgaWYgKG1hbmlwdWxhdGVUeXBlKC8oYnwtKTEzLykpICBub3Rlc1s2XSA9IC0xXG4gIGlmIChtYW5pcHVsYXRlVHlwZSgvMTMvKSkgICAgICAgbm90ZXNbNl0gPSAwXG4gIC8vIG9taXRcbiAgc3dpdGNoIChvbWl0KSB7XG4gICAgY2FzZSBcIjFcIjogIG5vdGVzWzBdID0gbnVsbDsgYnJlYWtcbiAgICBjYXNlIFwiM1wiOiAgbm90ZXNbMV0gPSBudWxsOyBicmVha1xuICAgIGNhc2UgXCI1XCI6ICBub3Rlc1syXSA9IG51bGw7IGJyZWFrXG4gICAgY2FzZSBcIjdcIjogIG5vdGVzWzNdID0gbnVsbDsgYnJlYWtcbiAgICBjYXNlIFwiOVwiOiAgbm90ZXNbNF0gPSBudWxsOyBicmVha1xuICAgIGNhc2UgXCIxMVwiOiBub3Rlc1s1XSA9IG51bGw7IGJyZWFrXG4gICAgY2FzZSBcIjEzXCI6IG5vdGVzWzZdID0gbnVsbDsgYnJlYWtcbiAgfVxuXG4gIHJldHVybiBub3Rlc1xufVxuXG5jb25zdCB0cmFuc3Bvc2VyID0gKG5vdGUsIGludGVydmFsKSA9PiBOb3RlLmZyb21NaWRpKE5vdGUubWlkaShub3RlKSArIGludGVydmFsKVxuXG5jb25zdCBidWlsZENob3JkID0gKHJvb3QsIGJhc2VOb3RlcywgdHJhbnNsYXRvcikgPT4ge1xuICBjb25zdCBub3RlcyA9IFtdXG4gIGNvbnN0IGNob3JkMTMgPSBDaG9yZC5ub3Rlcyhyb290LCBcIjEzXCIpIC8vIDEz44Kz44O844OJ44KS5Z+65rqW44Gr44GX44Gm6Z+z44KS6Laz44GX44Gf44KK5rib44KJ44GX44Gf44KK44GZ44KLXG4gIGNob3JkMTMuc3BsaWNlKDUsIDAsIERpc3RhbmNlLnRyYW5zcG9zZShyb290LCBcIk0xMVwiKSkgLy8gdG9uYWwg44GuIDEz44Kz44O844OJ44GvIDExdGgg44GMIG9taXQg44GV44KM44Gm44GE44KLXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpICs9IDEpIHtcbiAgICBpZiAodHJhbnNsYXRvcltpXSAhPT0gbnVsbCkgbm90ZXMucHVzaCh0cmFuc3Bvc2VyKGNob3JkMTNbaV0sIHRyYW5zbGF0b3JbaV0pKVxuICB9XG4gIHJldHVybiBub3Rlc1xufVxuXG5jb25zdCBjaG9yZFRyYW5zbGF0b3IgPSAocm9vdCwgYmFzZUtleSwgdHlwZSkgPT4ge1xuICBjb25zdCBiYXNlTm90ZXMgPSBDaG9yZC5ub3RlcyhgJHtyb290fSR7YmFzZUtleX1gLCBcIk1cIilcbiAgY29uc3Qgbm90ZXMgPSBidWlsZENob3JkKGAke3Jvb3R9JHtiYXNlS2V5fWAsIGJhc2VOb3RlcywgdHJhbnNsYXRlVHlwZSh0eXBlKSlcbiAgcmV0dXJuIG5vdGVzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNob3JkVHJhbnNsYXRvclxuIl19